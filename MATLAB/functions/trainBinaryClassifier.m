function netBin = trainBinaryClassifier(XTrain, YTrain, XVal, YVal, ...
    inputDim, options, lrScheduler)
% trainBinaryClassifier  Train binary classifier using trainnet wrapper
%
%   netBin = trainBinaryClassifier(XTrain, YTrain, XVal, YVal, inputDim, options)
%   XTrain: [time x features x batch] or GPU array
%   YTrain: categorical labels
%   XVal, YVal: validation set (cell or time x features x batch). Options per trainingOptions.

    arguments
        XTrain
        YTrain
        XVal
        YVal
        inputDim (1,1) double {mustBePositive}
        options = struct()
        lrScheduler = []   % optional scheduler handle
    end

    BASEPATH = 'C:/Users/hp/Documents/MATLAB/INOVATIM_FINAL/functions';
    addpath(fullfile(BASEPATH, 'models'));
    addpath(fullfile(BASEPATH, 'data'));

    % set defaults if not provided
    if isempty(fieldnames(options))
        options.MaxEpochs = 100;
        options.InitialLearnRate = 1e-4;
        options.MiniBatchSize = 32;
        options.L2Regularization = 1e-3;
        options.Plots = "training-progress";
        options.Shuffle = "every-epoch";
    end

    latentDim = 64; hiddenChannels = 128; dropoutRate = 0.4;
    layers = buildBinaryClassifier(inputDim, latentDim, hiddenChannels, dropoutRate);

    % Check if scheduler is provided
    if isempty(lrScheduler)
        topts = trainingOptions("adam", ...
            MaxEpochs=options.MaxEpochs, ...
            InitialLearnRate=options.InitialLearnRate, ...
            MiniBatchSize=options.MiniBatchSize, ...
            L2Regularization=options.L2Regularization, ...
            Shuffle=options.Shuffle, ...
            Plots=options.Plots, ...
            Metrics=options.Metrics, ...
            ValidationData={XVal,YVal}, ...
            ValidationFrequency=options.ValidationFrequency, ...
            GradientThreshold=options.GradientThreshold);
    else
        topts = trainingOptions("adam", ...
            MaxEpochs=options.MaxEpochs, ...
            InitialLearnRate=options.InitialLearnRate, ...
            MiniBatchSize=options.MiniBatchSize, ...
            L2Regularization=options.L2Regularization, ...
            Shuffle=options.Shuffle, ...
            Plots=options.Plots, ...
            Metrics=options.Metrics, ...
            ValidationData={XVal,YVal}, ...
            ValidationFrequency=options.ValidationFrequency, ...
            GradientThreshold=options.GradientThreshold, ...
            LearnRateSchedule="piecewise", ...          % or "none" if using custom
            LearnRateDropFactor=lrScheduler.DropFactor, ... % from your scheduler struct
            LearnRateDropPeriod=lrScheduler.Period);
    end


    % Use trainnet (user has this in their toolbox/utility). If not present, user should replace.
    netBin = trainnet(XTrain, YTrain, layers, "crossentropy", topts);
end
